geom_qq() +
geom_abline()
# Images: heat maps -------------------------------------------------------
x <- expand.grid(x = 1:12, y = 1:10) %>%
mutate(z = 1:120)
x
# Images: heat maps -------------------------------------------------------
g <- expand.grid(x = 1:12, y = 1:10) %>%
mutate(z = 1:120)
g
x %>% ggplot(aes(x, y, fill = z)) +
geom_raster()
g %>% ggplot(aes(x, y, fill = z)) +
geom_raster()
g %>% ggplot(aes(x, y, fill = z)) +
geom_raster()
g %>% ggplot(aes(x, y, fill = z)) +
geom_raster() +
scale_fill_gradientn(colors =  terrain.colors(10))
# Images: heat maps -------------------------------------------------------
g <- expand.grid(x = 1:12, y = 1:10) %>%
mutate(z = 1:10)
g
# Images: heat maps -------------------------------------------------------
g <- expand.grid(x = 1:12, y = 1:10) %>%
mutate(z = 1:10)
# Images: heat maps -------------------------------------------------------
g <- expand.grid(x = 1:12, y = 1:10) %>%
mutate(z = 1:10)
g
# Images: heat maps -------------------------------------------------------
g <- expand.grid(x = 1:12, y = 1:10) %>%
mutate(z = 1:10)
# Images: heat maps -------------------------------------------------------
g <- expand.grid(x = 1:2, y = 1:5) %>%
mutate(z = 1:10)
g
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster()
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster()
scale_fill_gradientn(colors =  terrain.colors(10))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster()
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors =  terrain.colors(10))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(10))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(20))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(5))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(2))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(2),colours('blue','white'))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(2),colours('blue'))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(2),)
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(2))
? scale_fill_gradientn
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(2),
low = "#132B43",
high = "#56B1F7",)
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors=terrain.colors(2),
low = "#132B43",
high = "#56B1F7",)
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradient2(low = muted("red"),
mid = "white",
high = muted("blue"))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradient2(low = muted("red"),
mid = "white",
high = muted("blue"))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradient2(low = "red",
mid = "white",
high = "blue")
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradient2(low = "red",
high = "blue")
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradient2(high = "blue")
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradient2(high = "green")
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradient2(high = "red")
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors = terrain.colors(10),high="red")
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors = terrain.colors(10),high="red")
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradientn(colors = terrain.colors(10))
g %>% ggplot(aes(x,y,fill=z)) +
geom_raster() +
scale_fill_gradient2(high = "red")
x <- heights %>% filter(sex='female') %>% pull(height)
x <- heights %>% filter(sex=='female') %>% pull(height)
qplot(x)
x <- heights %>% filter(sex=='female') %>% pull(height)
# Quick plots -------------------------------------------------------------
x <- heights %>% filter(sex=='female') %>% pull(height)
qplot(x)
# Quick plots -------------------------------------------------------------
x <- heights %>% filter(sex=='female') %>% pull(height)
x
# Quick plots -------------------------------------------------------------
x <- heights %>% filter(sex=='Female') %>% pull(height)
x
qplot(x)
qplot(x,binwidth=1)
qplot(scale(x),binwidth=1)
qplot(scale(x))
qplot(scale(x),bins=40)
qplot(scale(x),bins=20)
qplot(scale(x),bins=20)+ geom_abline()
qplot(scale(x),bins=20)
heights %>% qplot(sex, height, data = .)
heights %>% qplot(sex, height)
heights %>% qplot(sex, height,data=.)
heights %>% qplot(sex, height,data=.,geom='boxplot')
heights %>% qplot(x,geom='density')
qplot(x,geom='density')
qplot(x,geom='density',xlab(Heights of Female (inches) ))
qplot(x,geom='density',xlab('Heights of Female (inches)'))
qplot(x,geom='density',xlab=('Heights of Female (inches)'))
qplot(x,geom='density',xlab=('Heights of Females (inches)'),ylab='Density')
qplot(x,geom='density',xlab=('Heights of Females (inches)'),
ylab='Density',color=I('red'))
geom_histogram(heights$height)
geom_histogram(height)
geom_histogram(data=heights$height)
geom_histogram(data=heights,height)
geom_histogram(heights,height)
# 1. Now we are going to use the geom_histogram function to make a histogram
# of the heights in the height data frame. When reading the documentation
# for this function we see that it requires just one mapping, the values to
# be used for the histogram. Make a histogram of all the plots.
# What is the variable containing the heights?
# a. sex
# b. heights
# c. height
# d. heights$height
heights %>% geom_histogram(height)
# 1. Now we are going to use the geom_histogram function to make a histogram
# of the heights in the height data frame. When reading the documentation
# for this function we see that it requires just one mapping, the values to
# be used for the histogram. Make a histogram of all the plots.
# What is the variable containing the heights?
# a. sex
# b. heights
# c. height
# d. heights$height
heights %>% geom_histogram(aes(height))
# 1. Now we are going to use the geom_histogram function to make a histogram
# of the heights in the height data frame. When reading the documentation
# for this function we see that it requires just one mapping, the values to
# be used for the histogram. Make a histogram of all the plots.
# What is the variable containing the heights?
# a. sex
# b. heights
# c. height
# d. heights$height
heights %>% ggplot(aes(height))+geom_histogram()
?geom_histogram
geom_histogram(aes(heights$height))
geom_histogram(aes(heights$sex))
geom_histogram(mapping=heights$sex)
geom_histogram(mapping=height,data=heights)
rm(list-ls())
rm(list=ls())
# Q1 ----------------------------------------------------------------------
# 1. Now we are going to use the geom_histogram function to make a histogram
# of the heights in the height data frame. When reading the documentation
# for this function we see that it requires just one mapping, the values to
# be used for the histogram. Make a histogram of all the plots.
# What is the variable containing the heights?
# a. sex
# b. heights
# c. height
# d. heights$height
?geom_histogram
library(dbplyr)
library(dslabs)
library(ggplot2)
rm(list=ls())
# Q1 ----------------------------------------------------------------------
# 1. Now we are going to use the geom_histogram function to make a histogram
# of the heights in the height data frame. When reading the documentation
# for this function we see that it requires just one mapping, the values to
# be used for the histogram. Make a histogram of all the plots.
# What is the variable containing the heights?
# a. sex
# b. heights
# c. height
# d. heights$height
?geom_histogram
geom_histogram(mapping=height,data=heights)
# Q1 ----------------------------------------------------------------------
# 1. Now we are going to use the geom_histogram function to make a histogram
# of the heights in the height data frame. When reading the documentation
# for this function we see that it requires just one mapping, the values to
# be used for the histogram. Make a histogram of all the plots.
# What is the variable containing the heights?
# a. sex
# b. heights
# c. height
# d. heights$height
data(heights)
geom_histogram(mapping=height,data=heights)
geom_histogram(mapping=heights$height,data=heights)
geom_histogram(mapping=heights,data=heights)
geom_histogram(mapping=heights,data=height)
geom_histogram(mapping=aes(heights),data=height)
geom_histogram(mapping=aes(height),data=heights)
geom_histogram(mapping=aes(height),data=heights,bin=10)
geom_histogram(mapping=aes(height),data=heights,binwidth=1)
geom_histogram(mapping=aes(heights$height))
data(heights)
geom_histogram(mapping=aes(heights$height))
p <- geom_histogram(mapping=aes(heights$height))
p
# Q2 ----------------------------------------------------------------------
p <- heights %>% ggplot(aes(height))
# Q3  ---------------------------------------------------------------------
# Now we are ready to add a layer to actually make the histogram. Use the
# object created in the previous exercise and the geom_histogram function
# to make the histogram.
p + geom_histogram()
# Q3  ---------------------------------------------------------------------
# Now we are ready to add a layer to actually make the histogram. Use the
# object created in the previous exercise and the geom_histogram function
# to make the histogram.
p + geom_histogram(binwidth = 1)
# Q4 ----------------------------------------------------------------------
# Use the binwidth argument to change the histogram made in the previous
# exercise to use bins of size 1 inch.
p + geom_histogram(binwidth=1)
# Q3  ---------------------------------------------------------------------
# Now we are ready to add a layer to actually make the histogram. Use the
# object created in the previous exercise and the geom_histogram function
# to make the histogram.
p + geom_histogram()
# Q4 ----------------------------------------------------------------------
# Use the binwidth argument to change the histogram made in the previous
# exercise to use bins of size 1 inch.
p + geom_histogram(binwidth=1)
source('C:/Users/arsha/OneDrive/LearningProgramming/LearningML/R/Ch9_DataDistribution/ex09_17.R', echo=TRUE)
# Q5 ----------------------------------------------------------------------
# Instead of a histogram, we are going to make a smooth density plot. In
# this case we will not make an object, but instead render the plot with
# one line of code. Change the geometry in the code previously used to make
# a smooth density instead of a histogram.
qplot(heights$height)
# Q5 ----------------------------------------------------------------------
# Instead of a histogram, we are going to make a smooth density plot. In
# this case we will not make an object, but instead render the plot with
# one line of code. Change the geometry in the code previously used to make
# a smooth density instead of a histogram.
qplot(heights$height,geom='density')
qplot(heights$height,geom='density',group='sex')
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
qplot(heights$height,group='sex',geom='density',)
p <- heights %>% ggplot(aes(height,group='sex'))
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
p <- heights %>% ggplot(aes(height,group='sex'))
p + geom_histogram(binwidth=1)
p + geom_density(binwidth=1)
p + geom_density()
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
p <- heights %>% ggplot(aes(height),group='sex')
p + geom_density()
p + geom_density(aes(group='sex'))
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
p <- heights %>% ggplot(aes(height))
p + geom_density(aes(group='sex'))
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(sex,height,geom='density'
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(sex,height,geom='density')
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(sex,height,group=sex,geom='density')
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(sex,height,geom='density')
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(sex,height)
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(sex,height)
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(sex,height)
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(height)
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
qplot(heights$height, heights$sex,geom='density')
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
qplot(heights$height, group=heights$sex,geom='density')
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(height, group=sex,geom='density')
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(height,group=sex,geom='density')
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(height,group=sex,geom='density',data=.)
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(height,group=sex,color=sex,geom='density',data=.)
# Q6 ----------------------------------------------------------------------
# Now we are going to make a density plot for males and females separately.
# We can do this using the group argument. We assign groups via the
# aesthetic mapping as each point needs to a group before making the
# calculations needed to estimate a density.
heights %>% qplot(height,color=sex,geom='density',data=.)
#8
heights %>%
ggplot(aes(height, fill = sex)) +
geom_density(aplha=.2)
#8
heights %>%
ggplot(aes(height, fill = sex)) +
geom_density(alpha=.2)
gapminder %>% as_tibble()
library(tidyverse)
library(dslabs)
data(gapminder)
gapminder %>% as_tibble()
library(dplyr)
gapminder %>% as_tibble()
filter(gapminder, year == 1962) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point()
filter(gapminder, year == 1962) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point()
library(ggplot)
library(ggplot2)
filter(gapminder, year == 1962) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point()
filter(gapminder, year == 1962) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point() +
x_label('Fertility Rate')
filter(gapminder, year == 1962) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point() +
xlabel('Fertility Rate')
filter(gapminder, year == 1962) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point() +
xlab('Fertility Rate')
filter(gapminder, year == 1962) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point() +
xlab('Fertility Rate') +
ylab('Life Expectancy Rate')
filter(gapminder, year == 1962) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point() +
xlab('Fertility Rate (Children/Mother)') +
ylab('Life Expectancy (Years)')
filter(gapminder, year %in% c(1962,2012) %>%
facet_grid(. ~ year)
geom_point() +
filter(gapminder, year %in% c(1962,2012) %>%
library(tidyverse)
library(dslabs)
library(dplyr)
library(ggplot2)
data(gapminder)
gapminder %>% as_tibble()
filter(gapminder, year %in% c(1962,2012) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point() +
facet_grid(. ~ year)
library(tidyverse)
library(dslabs)
library(dplyr)
library(ggplot2)
data(gapminder)
gapminder %>% as_tibble()
filter(gapminder, year %in% c(1962,2012) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point() +
facet_grid(. ~ year)
filter(gapminder, year %in% c(1962,2012) %>%
filter(gapminder, year %in% c(1962,2012)) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point() +
facet_grid(. ~ year)
filter(gapminder, year %in% c(1962,2012)) %>%
ggplot( aes(fertility, life_expectancy, color = continent)) +
geom_point() +
facet_grid(. ~ year) +
xlab('Fertility Rate (Children/Mother)') +
ylab('Life Expectancy (Years)')
library(gganimate)
install(gganimate)
install.packages(gganimate)
install.packages(gganimate, url=https://cloud.r-project.org/web/packages/gganimate/index.html)
install.packages(gganimate, url='https://cloud.r-project.org/web/packages/gganimate/index.html')
install.packages('https://cloud.r-project.org/web/packages/gganimate/index.htm'l)
install.packages('http://cloud.r-project.org/web/packages/gganimate/index.htm'l)
install.packages('http://cloud.r-project.org/web/packages/gganimate/index.html')
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
install.packages('gifski')
upgrade(RStudio.Version())
upgrade(RStudio)
RStudio.Version()
RStudio.upgrade()
RStudio.Upgrade()
