sigma <- sd(S)/sqrt(10^4)
sigma
se <- sd(X)/sqrt(n)
se
n <- 10^6
X <- sample(c(-1, 1),n,prob=c(p,1-p),replace=TRUE)
mean(X)
mu <- mean(S)/10^4
mu
sd(X)
sigma <- sd(S)/sqrt(10^4)
sigma
se <- sd(X)/sqrt(n)
se
library(gtools)
library(dplyr)
library(ggplot2)
rm=list(ls())
rm(list=ls())
# Q1 ----------------------------------------------------------------------
# 1. In American Roulette you can also bet on green. There are 18
# reds, 18 blacks and 2 greens (0 and 00). What are the chances the
# green comes out?
2/38
source("C:/Users/arsha/OneDrive/LearningProgramming/LearningML/R/Ch15_RandomVariables/exCh15_10.R", echo=TRUE)
# Q3 ----------------------------------------------------------------------
# 3. Compute the expected value of X.
n <- 10^4
b <- 10^4
S <- replicate(B,sample(c(1,-17), n, prob = c(18/19, 1/19)))
mean(S)
# Q3 ----------------------------------------------------------------------
# 3. Compute the expected value of X.
n <- 10^4
B <- 10^4
S <- replicate(B,sample(c(1,-17), n, prob = c(18/19, 1/19)))
S <- replicate(B,sample(c(1,-17), n, prob = c(18/19, 1/19),replace=TRUE))
mean(S)
# 4. Compute the standard error of X.
sd(S)
# 4. Compute the standard error of X.
sd(S)/sqrt(n)
mu <- (p*(-17) + (1-p)*(1))*n
# Q3 ----------------------------------------------------------------------
# 3. Compute the expected value of X.
p=1/19 #Pr(green)
mu <- (p*(-17) + (1-p)*(1))*n
mu
mu <- (p*(-17) + (1-p)*(1))
mu
mu <- (p*(-17) + (1-p)*(1))*1000
mu <- (p*(-17) + (1-p)*(1))
mu
E_x <- (p*(-17) + (1-p)*(1))
library(gtools)
library(dplyr)
library(ggplot2)
rm(list=ls())
# Q2 ----------------------------------------------------------------------
# 2. The payout for winning on green is $17 dollars. This means
# that if you bet a dollar and it lands on green, you get $17.
# Create a sampling model using sample to simulate the random
# variable X for your winnings.
x <- sample(c(1,-17), 1, prob = c(18/19, 1/19))
# Q2 ----------------------------------------------------------------------
# 2. The payout for winning on green is $17 dollars. This means
# that if you bet a dollar and it lands on green, you get $17.
# Create a sampling model using sample to simulate the random
# variable X for your winnings.
x <- sample(c(-1,17), 1, prob = c(18/19, 1/19))
x
# Q2 ----------------------------------------------------------------------
# 2. The payout for winning on green is $17 dollars. This means
# that if you bet a dollar and it lands on green, you get $17.
# Create a sampling model using sample to simulate the random
# variable X for your winnings.
x <- sample(c(-1,17), 1, prob = c(18/19, 1/19))
x
E_x <- (p*(17) + (1-p)*(-1))
E_x
# Q3 ----------------------------------------------------------------------
# 3. Compute the expected value of X.
p=1/19 #Pr(green)
E_x <- (p*(17) + (1-p)*(-1))
E_x
# Q4 ----------------------------------------------------------------------
# 4. Compute the standard error of X.
SE_x <- (17 - 1)*sqrt(p*(1-p))
SE_x
# 5. Now create a random variable S that is the sum of your
# winnings after betting on green 1000 times.
random_seed=1
n <- 10^4
B <- 10^4
S <- replicate(B,sample(c(1,-17), n, prob = c(18/19, 1/19),replace=TRUE))
rm(x)
S <- sample(c(1,-17), n, prob = c(18/19, 1/19),replace=TRUE)
n <- 10^3
B <- 10^4
S <- sample(c(1,-17), n, prob = c(18/19, 1/19),replace=TRUE)
# 6. What is the expected value of S?
ex_S <- mean(replicate(B,sample(c(1,-17), n, prob = c(18/19, 1/19),replace=TRUE)))
ex_S
E_x
# 6. What is the expected value of S?
ex_S <- mean(replicate(B,sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE)))
ex_S
# Q4 ----------------------------------------------------------------------
# 4. Compute the standard error of X.
SE_x <- abs(17 - 1)*sqrt(p*(1-p))
SE_x
# 7. What is the standard error of S?
sd(S)*sqrt(n)
# 7. What is the standard error of S?
sd(S)
# 7. What is the standard error of S?
sd_S <- sd(replicate(B,sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE)))
sd_S
# 6. What is the expected value of S?
ex_S <- mean(replicate(B,mean(sample(c(-1,17), n, prob = c(18/19, 1/19)),replace=TRUE)))
# 6. What is the expected value of S?
ex_S <- mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19)),replace=TRUE)))
# 6. What is the expected value of S?
ex_S <- mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
ex_S
# 7. What is the standard error of S?
sd_S <- sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
sd_S
# 5. Now create a random variable S that is the sum of your
# winnings after betting on green 1000 times.
random_seed=1
n <- 10^3
B <- 10^4
S <- sum(sample(c(1,-17), n, prob = c(18/19, 1/19),replace=TRUE))
# 6. What is the expected value of S?
ex_S <- mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
ex_S
# 7. What is the standard error of S?
sd_S <- sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
sd_S
# Q7 ----------------------------------------------------------------------
# 7. What is the standard error of S?
se_S <- sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
se_S
rm(sd_S)
s <- se_S
pnorm(0,mean=m,s=S)
# Q8 ----------------------------------------------------------------------
# 8. What is the probability that you end up winning money? Hint: use the CLT.
m <- ex_S
s <- se_S
pnorm(0,mean=m,s=s)
rm(m)
# Q8 ----------------------------------------------------------------------
# 8. What is the probability that you end up winning money? Hint: use the CLT.
mu <- ex_S
se <- se_S
pnorm(0,mean=m,s=s)
pnorm(0,mean=mu,s=se)
# Q5 ----------------------------------------------------------------------
# 5. Now create a random variable S that is the sum of your
# winnings after betting on green 1000 times.
set.seed(1)
n <- 10^3
B <- 10^4
S <- sum(sample(c(1,-17), n, prob = c(18/19, 1/19),replace=TRUE))
S
# Q6 ----------------------------------------------------------------------
# 6. What is the expected value of S?
ex_S <- 1000*E_x
ex_S
library(gtools)
library(dplyr)
library(ggplot2)
rm(list=ls())
# Q1 ----------------------------------------------------------------------
# 1. In American Roulette you can also bet on green. There are 18
# reds, 18 blacks and 2 greens (0 and 00). What are the chances the
# green comes out?
2/38
# Q2 ----------------------------------------------------------------------
# 2. The payout for winning on green is $17 dollars. This means
# that if you bet a dollar and it lands on green, you get $17.
# Create a sampling model using sample to simulate the random
# variable X for your winnings.
x <- sample(c(-1,17), 1, prob = c(18/19, 1/19))
rm(x)
# Q3 ----------------------------------------------------------------------
# 3. Compute the expected value of X.
p=1/19 #Pr(green)
E_x <- (p*(17) + (1-p)*(-1))
E_x
# Q4 ----------------------------------------------------------------------
# 4. Compute the standard error of X.
SE_x <- abs(17 - 1)*sqrt(p*(1-p))
SE_x
# Q5 ----------------------------------------------------------------------
# 5. Now create a random variable S that is the sum of your
# winnings after betting on green 1000 times.
set.seed(1)
n <- 10^3
B <- 10^4
S <- sum(sample(c(1,-17), n, prob = c(18/19, 1/19),replace=TRUE))
S
# Q6 ----------------------------------------------------------------------
# 6. What is the expected value of S?
ex_S <- 1000*E_x
ex_S
# Q7 ----------------------------------------------------------------------
# 7. What is the standard error of S?
se_S <- 1000*SE_x
se_S
# Q8 ----------------------------------------------------------------------
# 8. What is the probability that you end up winning money?
# Hint: use the CLT.
mu <- ex_S
se <- se_S
pnorm(0,mean=mu,s=se)
# Q9 ----------------------------------------------------------------------
# 9. Create a Monte Carlo simulation that generates 1,000 outcomes of S.
# Compute the average and standard deviation of the resulting list to confirm
# the results of 6 and 7.
set.seed(1)
mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# -52.3324
sqrt(n)*sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# 11. The Monte Carlo result and the CLT approximation are close, but not that
# close. What could account for this? 1,000 simulations is not enough. If we
# do more, they match. The CLT does not work as well when the probability of
# success is small. In this case, it was 1/19. If we make the number of
# roulette plays bigger, they will match better. The difference is within
# rounding error. The CLT only works for averages.
B <- 10^4
n <- 10^4
mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# -52.3324
sqrt(n)*sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# 11. The Monte Carlo result and the CLT approximation are close, but not that
# close. What could account for this? 1,000 simulations is not enough. If we
# do more, they match. The CLT does not work as well when the probability of
# success is small. In this case, it was 1/19. If we make the number of
# roulette plays bigger, they will match better. The difference is within
# rounding error. The CLT only works for averages.
B <- 10^5
n <- 10^3
mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# -52.46
sqrt(n)*sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
B <- 10^3
n <- 10^3
mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# -52.62
sqrt(n)*sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# 11. The Monte Carlo result and the CLT approximation are close, but not that
# close. What could account for this? 1,000 simulations is not enough. If we
# do more, they match. The CLT does not work as well when the probability of
# success is small. In this case, it was 1/19. If we make the number of
# roulette plays bigger, they will match better. The difference is within
# rounding error. The CLT only works for averages.
set.seed(1)
B <- 10^5
n <- 10^3
mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# -52.46
sqrt(n)*sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
B <- 10^4
n <- 10^3
mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
S <- sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))
S
Y <- mean(sample(c(17,-1),1000,c(2/38,36/38))
Y <- mean(sample(c(17,-1),1000,c(2/38,36/38)))
Y <- mean(sample(c(17,-1),1000,prob=c(2/38,36/38),replace=TRUE))
# 13. What is the expected value of Y?
(17-1)*sqrt(p*(1-p))
# 13. What is the expected value of Y?
p*17 + (1-p)(-1)
# 13. What is the expected value of Y?
p*17 + (1-p)*(-1)
# 14. What is the standard error of Y?
(17-1)sqrt(p*(1-p))
# 14. What is the standard error of Y?
(17-1)*sqrt(p*(1-p))
# winnings = sum(sample(c(1,-1),1000,prob=(2/38,36/38),replace=TRUE))
Y <- mean(sample(c(1,-1),n,prob=(2/38,36/38),replace=TRUE)+
sum(sample(c(1,-1),1000,prob=(2/38,36/38),replace=TRUE)))
# winnings = sum(sample(c(1,-1),1000,prob=(2/38,36/38),replace=TRUE))
Y <- mean(sample(c(1,-1),n,prob=c(2/38,36/38),replace=TRUE)+
sum(sample(c(1,-1),1000,prob=(2/38,36/38),replace=TRUE)))
# winnings = sum(sample(c(1,-1),1000,prob=(2/38,36/38),replace=TRUE))
Y <- mean(sample(c(1,-1),n,prob=c(2/38,36/38),replace=TRUE)+
sum(sample(c(1,-1),1000,prob=c(2/38,36/38),replace=TRUE)))
rm(Y)
rm(list=ls())
library(gtools)
library(dplyr)
library(ggplot2)
rm(list=ls())
# Q1 ----------------------------------------------------------------------
# 1. In American Roulette you can also bet on green. There are 18
# reds, 18 blacks and 2 greens (0 and 00). What are the chances the
# green comes out?
2/38
# Q2 ----------------------------------------------------------------------
# 2. The payout for winning on green is $17 dollars. This means
# that if you bet a dollar and it lands on green, you get $17.
# Create a sampling model using sample to simulate the random
# variable X for your winnings.
x <- sample(c(-1,17), 1, prob = c(18/19, 1/19))
#rm(x)
# Q3 ----------------------------------------------------------------------
# 3. Compute the expected value of X.
p=1/19 #Pr(green)
E_x <- (p*(17) + (1-p)*(-1))
E_x
# Q4 ----------------------------------------------------------------------
# 4. Compute the standard error of X.
SE_x <- abs(17 - 1)*sqrt(p*(1-p))
SE_x
# Q5 ----------------------------------------------------------------------
# 5. Now create a random variable S that is the sum of your
# winnings after betting on green 1000 times.
set.seed(1)
n <- 10^3
S <- sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))
S
# Q6 ----------------------------------------------------------------------
# 6. What is the expected value of S?
ex_S <- 1000*E_x
ex_S
# -52.63
# Q7 ----------------------------------------------------------------------
# 7. What is the standard error of S?
se_S <- 1000*SE_x
se_S
# 3572.75
# Q8 ----------------------------------------------------------------------
# 8. What is the probability that you end up winning money?
# Hint: use the CLT.
mu <- ex_S
se <- se_S
pnorm(0,mean=mu,s=se)
# Q9,10 ----------------------------------------------------------------------
# 9. Create a Monte Carlo simulation that generates 1,000 outcomes of S.
# Compute the average and standard deviation of the resulting list to confirm
# the results of 6 and 7.
# 10. Now check your answer to 8 using the Monte Carlo result.
set.seed(1)
B <- 10^3
n <- 10^3
mean(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# -52.62
sqrt(n)*sd(replicate(B,sum(sample(c(-1,17), n, prob = c(18/19, 1/19),replace=TRUE))))
# 4149.53
# winnings = sum(sample(c(1,-1),1000,prob=(2/38,36/38),replace=TRUE))
Y <- mean(sample(c(1,-1),n,prob=c(2/38,36/38),replace=TRUE))
library(gtools)
library(dplyr)
library(ggplot2)
rm(list=ls())
n <- 1000
loss_per_foreclosure <- -200000
p <- 0.02
defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
loss_per_foreclosure <- -2e5
p <- 0.02
defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
loss_per_foreclosure <- -2*10^5
p <- 0.02
defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
n <- 1000
loss_per_foreclosure <- -2*10^5
p <- 0.02
defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
# Case Study --------------------------------------------------------------
# Interest Rates
se.seed(1)
n <- 1000
# Case Study --------------------------------------------------------------
# Interest Rates
set.seed(1)
n <- 1000
loss_per_foreclosure <- -2*10^5
p <- 0.02
defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
# Case Study --------------------------------------------------------------
# Interest Rates
set.seed(1)
n <- 1000
loss_per_foreclosure <- -2*10^5
p <- 0.02
defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
B <- 10^4
losses <- replicate(B, {
defaults <- sample( c(0,1), n, prob=c(1-p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
})
n*(p*loss_per_foreclosure + (1-p)*0)
sqrt(n)*abs(loss_per_foreclosure)*sqrt(p*(1-p))
rm(list=ls())
library(gtools)
library(dplyr)
library(ggplot2)
S <- sum(sample(c(loss,0),n,prob=c(p,1-p))
# Q1 ----------------------------------------------------------------------
# 1. Create a random variable S with the earnings of your bank if you give
# out 10,000 loans, the default rate is 0.3, and you lose $200,000 in each
# foreclosure.
n <- 10^4
p <- .3
loss <- -2*10^5
S <- sum(sample(c(loss,0),n,prob=c(p,1-p))
S
S <- sum(sample(c(loss,0),n,prob=c(p,1-p)))
loss <- (-2)*10^5
S <- sum(sample(c(loss,0),n,prob=c(p,1-p)))
S <- sum(sample(c(loss,0),n,prob=c(p,1-p),replace=TRUE))
S <- sum( sample(c(loss,0),n,prob=c(p,(1-p)),replace=TRUE) )
S <- sum(sample(c(loss,0), n, prob=c(p,(1-p)),replace=TRUE) )
sample(c(loss,0),n,prob=c(p,1-p),replace=TRUE)
# Q1 ----------------------------------------------------------------------
# 1. Create a random variable S with the earnings of your bank if you give
# out 10,000 loans, the default rate is 0.3, and you lose $200,000 in each
# foreclosure.
n <- 10^4
S <- sum(sample(c(loss,0), n, prob=c(p,(1-p)),replace=TRUE) )
e <- replicate(B,sum(sample(c(loss,0), n, prob=c(p,(1-p)),replace=TRUE) ))
B <- 10^4
e <- replicate(B,sum(sample(c(loss,0), n, prob=c(p,(1-p)),replace=TRUE) ))
hist(e)
p <- .03
loss <- (-2)*10^5
S <- sum(sample(c(loss,0), n, prob=c(p,(1-p)),replace=TRUE) )
B <- 10^4
e <- replicate(B,sum(sample(c(loss,0), n, prob=c(p,(1-p)),replace=TRUE) ))
hist(e)
mean(e)
sd(e)*sqrt(n)
p*0+(1-p)*loss
(p*0+(1-p)*loss)*n
mean(e)
(p*0+(1-p)*loss)*n
# Q1 ----------------------------------------------------------------------
# 1. Create a random variable S with the earnings of your bank if you give
# out 10,000 loans, the default rate is 0.3, and you lose $200,000 in each
# foreclosure.
set.seed(1)
n <- 10^4
p <- .03
loss <- (-2)*10^5
S <- sum(sample(c(loss,0), n, prob=c(p,(1-p)),replace=TRUE) )
B <- 10^4
e <- replicate(B,sum(sample(c(loss,0), n, prob=c(p,(1-p)),replace=TRUE) ))
hist(e)
mean(e)
(p*0+(1-p)*loss)*n
sd(e)*sqrt(n)
loss*sqrt(p*(1-p))
sd(e)
loss*sqrt(p*(1-p))
sd(e)/sqrt(n)
loss*sqrt(p*(1-p))
# SE
sd(e) # monte carlo
sqrt(n)*loss*sqrt(p*(1-p)) # theoretical
sqrt(n)*abs(loss)*sqrt(p*(1-p)) # theoretical
# SE
sd(e) # monte carlo
sqrt(n)*abs(loss)*sqrt(p*(1-p)) # theoretical
4082/180000
# int rate to make expted value = 0
r <- loss/180000 * p/(1-p)
r
# int rate to make expted value = 0
r <- abs(loss)/180000 * p/(1-p)
r
loan <- 180000
# int rate to make expted value = 0
r <- abs(loss)/loan * p/(1-p)
r
mu <- qnorm(.05,mean=mean(e), s=sd(e))
mu
# Interest rate be so that the chance of losing money is 1 in 20?
# In math notation, what should the interest rate be so that Pr(S<0)=0.05
mu <- sd(e) * qnorm(.05,mean=mean(e), s=sd(e)) / sqrt(n)
mu
# Interest rate be so that the chance of losing money is 1 in 20?
# In math notation, what should the interest rate be so that Pr(S<0)=0.05
mu <- -1* sd(e) * qnorm(.05,mean=mean(e), s=sd(e)) / sqrt(n)
mu
# Interest rate be so that the chance of losing money is 1 in 20?
# In math notation, what should the interest rate be so that Pr(S<0)=0.05
mu <- -1* sd(e) * qnorm(.05) / sqrt(n)
mu
mu/loan
# Interest rate be so that the chance of losing money is 1 in 20?
# In math notation, what should the interest rate be so that Pr(S<0)=0.05
3.44/100* loan
pnorm(6192,mean=(p*0+(1-p)*loss)*n,s=sqrt(n)*abs(loss)*sqrt(p*(1-p))
pnorm(6192,mean=(p*0+(1-p)*loss)*n,s=sqrt(n)*abs(loss)*sqrt(p*(1-p)))
pnorm(6192,mean=(p*0+(1-p)*loss),sabs(loss)*sqrt(p*(1-p)))
pnorm(6192,mean=(p*0+(1-p)*loss),s=abs(loss)*sqrt(p*(1-p)))
pnorm(1)
pnorm(0,s=abs(loss-3.44/100*loan)*sqrt(p*(1-p)),mean=(p*3.44/100*loan+(1-p)*loss)*n)
qnorm(0,s=abs(loss-3.44/100*loan)*sqrt(p*(1-p)),mean=(p*3.44/100*loan+(1-p)*loss)*n)
